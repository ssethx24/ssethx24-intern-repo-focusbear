{"ast":null,"code":"import axios from 'axios';\n\n// Function to generate a unique request ID\nfunction generateRequestId() {\n  return Math.random().toString(36).substring(2) + Date.now();\n}\n\n// Create an Axios instance\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:5000/api ',\n  // Replace with your API base URL\n  headers: {\n    'Accept': '*/*',\n    'X-Request-ID': generateRequestId()\n  },\n  timeout: 10000 // 10 seconds\n});\n\n// Function to get a new AbortController\nexport function getAbortController() {\n  return new AbortController();\n}\n\n// Request interceptor for auth token\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  // Always set a new request ID\n  config.headers['X-Request-ID'] = generateRequestId();\n  return config;\n}, error => Promise.reject(error));\nexport default axiosInstance;","map":{"version":3,"names":["axios","generateRequestId","Math","random","toString","substring","Date","now","axiosInstance","create","baseURL","headers","timeout","getAbortController","AbortController","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject"],"sources":["C:/Users/shaur/Desktop/Focus Bear Repo Intern/ssethx24-intern-repo-focusbear/my-react-app/src/api/axiosInstance.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Function to generate a unique request ID\r\nfunction generateRequestId() {\r\n  return Math.random().toString(36).substring(2) + Date.now();\r\n}\r\n\r\n// Create an Axios instance\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'http://localhost:5000/api ', // Replace with your API base URL\r\n  headers: {\r\n    'Accept': '*/*',\r\n    'X-Request-ID': generateRequestId(),\r\n  },\r\n  timeout: 10000, // 10 seconds\r\n});\r\n\r\n// Function to get a new AbortController\r\nexport function getAbortController() {\r\n  return new AbortController();\r\n}\r\n\r\n// Request interceptor for auth token\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    // Always set a new request ID\r\n    config.headers['X-Request-ID'] = generateRequestId();\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nexport default axiosInstance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,SAASC,iBAAiBA,CAAA,EAAG;EAC3B,OAAOC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;AAC7D;;AAEA;AACA,MAAMC,aAAa,GAAGR,KAAK,CAACS,MAAM,CAAC;EACjCC,OAAO,EAAE,4BAA4B;EAAE;EACvCC,OAAO,EAAE;IACP,QAAQ,EAAE,KAAK;IACf,cAAc,EAAEV,iBAAiB,CAAC;EACpC,CAAC;EACDW,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEF;AACA,OAAO,SAASC,kBAAkBA,CAAA,EAAG;EACnC,OAAO,IAAIC,eAAe,CAAC,CAAC;AAC9B;;AAEA;AACAN,aAAa,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACP,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUQ,KAAK,EAAE;EACrD;EACA;EACAD,MAAM,CAACP,OAAO,CAAC,cAAc,CAAC,GAAGV,iBAAiB,CAAC,CAAC;EACpD,OAAOiB,MAAM;AACf,CAAC,EACAI,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;AAED,eAAed,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}